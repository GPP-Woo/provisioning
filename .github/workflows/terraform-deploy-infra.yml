
name: Deploy Infrastructure

on:
  push:
    branches:
      - main
    paths:
      - "infra/**.tf*"
      - ".github/workflows/**"
  pull_request:
    branches:
      - main
    paths:
      - "infra/**.tf*"
      - ".github/workflows/**"
  workflow_dispatch:

jobs:
  terraform:
    name: Terraform-Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write  # Required for OIDC

    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_USE_OIDC: true
      # tf_resource_group_name: "woo-provisioning"
      # tf_storage_account_name: "wooprovisioning"
      # tf_state_container: "github-oidc-terraform-tfstate"
      # tf_state_key: "terraform.tfstate"
      # working_directory: infra/environments/prod
      ENV: "prod"
      INFRA_TARGETS: "-target=azurerm_key_vault.cisecrets -target=azurerm_key_vault_access_policy.current_user -target=azurerm_key_vault_secret.aks_kubeconfig -target=azurerm_key_vault_secret.vm_privkey -target=azurerm_resource_group.rg -target=module.acr.azurerm_container_registry.acr -target=module.acr.azurerm_private_dns_zone.acr -target=module.acr.azurerm_private_dns_zone_virtual_network_link.acr1 -target=module.acr.azurerm_private_dns_zone_virtual_network_link.acr2 -target=module.acr.azurerm_private_endpoint.acr[0] -target=module.agw.azurerm_application_gateway.agw -target=module.agw.azurerm_public_ip.ip -target=module.aks.azurerm_kubernetes_cluster.main -target=module.aks.azurerm_private_dns_zone.aks -target=module.aks.azurerm_private_dns_zone_virtual_network_link.aks1 -target=module.aks.azurerm_private_dns_zone_virtual_network_link.aks2 -target=module.aks.azurerm_role_assignment.acr -target=module.aks.azurerm_role_assignment.agw -target=module.aks.azurerm_role_assignment.dns_contributor -target=module.aks.azurerm_role_assignment.network_contributor -target=module.aks.azurerm_user_assigned_identity.aks -target=module.aks.azurerm_user_assigned_identity.pod -target=module.bastion.azurerm_bastion_host.bastion -target=module.bastion.azurerm_linux_virtual_machine.vm1[0] -target=module.bastion.azurerm_network_interface.vm1nic[0] -target=module.bastion.azurerm_public_ip.bastion -target=module.bastion.random_pet.vm_password -target=module.bastion.tls_private_key.vm1[0] -target=module.kv.azurerm_key_vault.kv -target=module.kv.azurerm_private_dns_zone.kv -target=module.kv.azurerm_private_dns_zone_virtual_network_link.kv1 -target=module.kv.azurerm_private_dns_zone_virtual_network_link.kv2 -target=module.kv.azurerm_private_endpoint.kv -target=module.law.azurerm_log_analytics_solution.law -target=module.law.azurerm_log_analytics_workspace.law -target=module.vnets.azurerm_subnet.agw -target=module.vnets.azurerm_subnet.aks -target=module.vnets.azurerm_subnet.bastion -target=module.vnets.azurerm_subnet.global -target=module.vnets.azurerm_subnet.utils -target=module.vnets.azurerm_virtual_network.vnet_aks -target=module.vnets.azurerm_virtual_network.vnet_hub -target=module.vnets.azurerm_virtual_network_peering.to_vnet_aks -target=module.vnets.azurerm_virtual_network_peering.to_vnet_hub"
      INFRA_PLAN: "infra.tfplan"
      CRDS_PLAN: "crds.tfplan"
      TF_CLI_ARGS_plan: "-input=false -no-color"
      TF_CLI_ARGS_apply: "-input=false -no-color"
      working_directory: infra
      
    steps:
    - name: Checkout source
      uses: actions/checkout@v4

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.12.2
        terraform_wrapper: true

    - name: Terraform Format
      if: github.event_name == 'pull_request'
      run: terraform fmt
      working-directory: ${{ env.working_directory }}

    - name: Auto Commit Changes
      uses: stefanzweifel/git-auto-commit-action@v5
      if: github.event_name == 'pull_request'
      with:
        commit_message: "Terraform fmt"
        file_pattern: "*.tf *.tfvars"
        commit_user_name: "github-actions[bot]"

    - name: Terraform Init
      run: terraform init -backend-config=${{ env.ENV }}.azurerm.tfbackend
      working-directory: ${{ env.working_directory }}

    # Beware: validate WILL break on use of known-after-apply resources for dict keys
    - name: Terraform Validate
      id: validate
      run: terraform validate
      working-directory: ${{ env.working_directory }}

    # Phase 1: plan and apply AKS-infra resources, UP TO env.INFRA_TARGETS, because without a
    # working bastion tunnel, setup of the kubernetes and helm providers would fail.
    # Without env.INFRA_TARGETS, this step will fail the first time round, because:
    #  - no bastion VM exists, so
    #  - no SOCKS tunnel can be started for the Kubernetes provider.
    # This is extremely annoting, but may be unavoidable for now... [FIXME FIXME(?)]
    - name: Terraform Plan 1 - AKS infra
      run: terraform plan -var-file=${{ env.ENV }}.tfvars ${{ env.INFRA_TARGETS }} -out=${{ env.INFRA_PLAN }}
      # run: terraform plan -var-file=${{ env.ENV }}.tfvars -out=${{ env.INFRA_PLAN }}
      working-directory: ${{ env.working_directory }}

    - name: Upload 1 - AKS infra
      uses: actions/upload-artifact@v4
      with:
        path: ${{ env.working_directory }}/${{ env.INFRA_PLAN }}

    # For verification: temporarily ALWAYS apply to prod, even in PRs... [FIXME FIXME]
    - name: Terraform Apply 1 - AKS infra
      # if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      run: terraform apply -auto-approve ${{ env.INFRA_PLAN }}
      working-directory: ${{ env.working_directory }}

    - name: VERIFY RESULTS Plan 1 - AKS infra
      run: terraform plan -var-file=${{ env.ENV }}.tfvars
      working-directory: ${{ env.working_directory }}

    - name: Verify availability of bastion vm tunnel endpoint
      id: validateTunnel
      run: ./azure-private.sh validate
      working-directory: ${{ env.working_directory }}
      continue-on-error: true

    - name: Bastion vm tunnel report
      if: always() && steps.validateTunnel.outcome == 'failure'
      run: |
        echo "*** WARNING: The Azure Bastion VM tunnel endpoint cannot be reached,"
        echo "             make sure to complete Phase 1 - AKS Infra setup first!"

    # Phase 2: we can now use Terraform WITH connectivity to the private AKS cluster endpoint via
    # wrapper script azure-private.sh that provides a SOCKS5 proxy via our Azure Bastion VM.
    - name: Terraform Plan 2 - CRDs
      id: plan2
      if: steps.validateTunnel.outcome == 'success'
      run: ./azure-private.sh terraform plan -var-file=${{ env.ENV }}.tfvars -out=${{ env.CRDS_PLAN }}
      working-directory: ${{ env.working_directory }}

    - name: Upload 2 - CRDs
      if: steps.plan2.outcome == 'success'
      uses: actions/upload-artifact@v4
      with:
        path: ${{ env.working_directory }}/${{ env.CRDS_PLAN }}

    - name: Terraform Apply 2 - CRDs
      if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      run: ./azure-private.sh terraform apply -auto-approve ${{ env.CRDS_PLAN }}
      working-directory: ${{ env.working_directory }}
